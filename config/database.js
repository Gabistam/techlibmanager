const mongoose = require('mongoose');
// Importation du module Mongoose, qui permet de gÃ©rer les connexions et les opÃ©rations avec MongoDB.

// Chargement des variables d'environnement depuis un fichier .env.
require('dotenv').config(); 
// Le module dotenv charge les variables d'environnement dÃ©finies dans un fichier .env pour qu'elles soient accessibles dans process.env.

// Construction de l'URI de connexion Ã  MongoDB en utilisant des variables d'environnement.
const MONGODB_URI = `mongodb+srv://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@${process.env.DB_CLUSTER}.mongodb.net/${process.env.DB_DATABASE}?retryWrites=true&w=majority`;
// `process.env` rÃ©cupÃ¨re les valeurs des variables d'environnement dÃ©finies dans le fichier .env.
// - DB_USERNAME : Nom d'utilisateur pour se connecter Ã  MongoDB.
// - DB_PASSWORD : Mot de passe associÃ© Ã  l'utilisateur.
// - DB_CLUSTER : Nom du cluster MongoDB.
// - DB_DATABASE : Nom de la base de donnÃ©es cible.
// La chaÃ®ne construite permet de spÃ©cifier la mÃ©thode d'Ã©criture avec `retryWrites=true` et la version de write concern avec `w=majority`.

// Fonction pour Ã©tablir la connexion Ã  MongoDB.
const connectDB = async () => {
    try {
        // Tentative de connexion Ã  MongoDB avec l'URI et des options de configuration.
        await mongoose.connect(MONGODB_URI, {
            useNewUrlParser: true, // Utilisation du nouvel analyseur d'URL, recommandÃ© pour Ã©viter certains avertissements.
            useUnifiedTopology: true, // Activation de la gestion unifiÃ©e des topologies, rÃ©duisant les risques d'erreurs.
        });
        console.log('ğŸš€ğŸš€  La connexion Ã  la base de donnÃ©es a Ã©tÃ© Ã©tablie avec succÃ¨s ğŸš€ğŸš€ ');
        // Message de succÃ¨s affichÃ© dans la console si la connexion est Ã©tablie.
    } catch (error) {
        console.error('Impossible de se connecter Ã  la base de donnÃ©es', error);
        // En cas d'erreur, un message explicite est affichÃ©, avec les dÃ©tails de l'erreur.
    }
};

module.exports = { connectDB };
